#!/cvmfs/oasis.opensciencegrid.org/ligo/sw/pycbc/x86_64_rhel_7/virtualenv/pycbc-v1.16.13/bin/python

from __future__ import division
import numpy as np
import h5py
import argparse, logging

parser = argparse.ArgumentParser()
#parser.add_argument('--version', action='version', version=pycbc.version.git_verbose_msg)
parser.add_argument('--fit-files',nargs='+')
parser.add_argument('--output-file')
#parser.add_argument("--template-fraction-range", default="0/1",
#                    help="Optional, analyze only part of template bank. "
#                    "Format is PART/NUM_PARTS")
parser.add_argument('--verbose', '-v', action='count')
args = parser.parse_args()


logging.basicConfig(format='%(asctime)s : %(message)s', level=logging.INFO)


chi_eff=[]
count_above_thresh=[]
count_in_template=[]
eta=[]
fit_coeff=[]
median_sigma=[]
template_duration=[]
template_id=[]
for fname in args.fit_files:

    #rangestr = args.template_fraction_range
    #part = int(rangestr.split('/')[0])
    #pieces = int(rangestr.split('/')[1])
    
    try:
        f = h5py.File(fname, 'r')
    except IOError as e:
        logging.error("Cannot open %s" % fname)
        raise e
    ifo = f.attrs['ifo']

    chi_eff.append(f['chi_eff'][:])
    count_above_thresh.append(f['count_above_thresh'][:])
    count_in_template.append(f['count_in_template'][:])
    eta.append(f['eta'][:])
    fit_coeff.append(f['fit_coeff'][:])
    median_sigma.append(f['median_sigma'][:])
    template_duration.append(f['template_duration'][:])
    template_id.append(f['template_id'][:])
    analysis_time=f.attrs['analysis_time']
    stat=f.attrs['stat']
    stat_threshold=f.attrs['stat_threshold']
    f.close()

        
logging.info('saving fit arguements..')

outfile = h5py.File(args.output_file, 'w') #h.File(ifo+'_FIT_over_param_stage2.hdf', 'w')
# store template-dependent fit output
outfile.create_dataset("chi_eff", data=np.concatenate(chi_eff))
outfile.create_dataset("count_above_thresh", data=np.concatenate(count_above_thresh))
outfile.create_dataset("count_in_template", data=np.concatenate(count_in_template))
outfile.create_dataset("eta", data=np.concatenate(eta))
outfile.create_dataset("fit_coeff", data=np.concatenate(fit_coeff))
outfile.create_dataset("median_sigma", data=np.concatenate(median_sigma))
outfile.create_dataset("template_duration", data=np.concatenate(template_duration))
outfile.create_dataset("template_id", data=np.concatenate(template_id))

# add some metadata
outfile.attrs.create("ifo", data=ifo)

outfile.attrs.create("stat_threshold", data=stat_threshold)

#if args.save_trig_param:
#    outfile.attrs.create("save_trig_param", data=args.save_trig_param.encode())
outfile.attrs.create("stat_threshold", data=stat_threshold)
outfile.attrs.create("analysis_time", data=analysis_time)

# add a magic file attribute so that coinc_findtrigs can parse it
outfile.attrs.create("stat",data=stat)
outfile.close()
logging.info('done')
